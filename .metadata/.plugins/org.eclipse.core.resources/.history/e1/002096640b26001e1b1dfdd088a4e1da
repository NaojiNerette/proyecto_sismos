package com.jbascur.springboot.app.eventos.services;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jbascur.springboot.app.eventos.models.EventDao;
import com.jbascur.springboot.app.eventos.models.entity.Event;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class SismosEventService implements ISismosEventService {

	@Autowired
	private EventDao eventDao;
	
	@Autowired
	RestTemplate clienteRest;

	@PostConstruct
	public void init() {
		ObjectMapper mapper = new ObjectMapper();
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
		
		ResponseEntity<HashMap> eventos = 
				clienteRest.exchange("https://api.xor.cl/sismo/recent", 
							HttpMethod.GET,
							HttpEntity.EMPTY,
							new ParameterizedTypeReference<HashMap>() {
							}
				);
	
		
		ArrayList<Map<String, String>> listaEventos = (ArrayList<Map<String, String>>)eventos.getBody().get("events");
		
		Stream<Event> events = listaEventos.stream()
				.map((Map<String, String>, Event) mapa -> { 
						 new Event(Long.parseLong(mapa.get("id")),
								 mapa.get("url"),
								 mapa.get("mapUrl"),
								 mapa.get("localDate"),
								 mapa.get("utcDate"),
								 BigDecimal.valueOf(0.0),//(BigDecimal)map.get("latitude"),
								 BigDecimal.valueOf(0.0), //(BigDecimal)map.get("longitude"),
								 "1.1", //((Map<String, String>)map.get("magnitude")).get(listaEventos)
								 mapa.get("geoReference"));
					}).flatMap(e -> Stream.of(e));
		
		
		//List<Event> listaEventos = mapper.convertValue(
		//		eventos.getBody().get("events"), 
		//		new TypeReference<List<Event>>(){});
			
		
		System.out.println(listaEventos);

		//listaEventos.forEach(evento -> eventDao.save(evento));
		
	}
	
	@Override
	@Transactional(readOnly = true)
	public List<Event> findAll() {
		return (List<Event>) eventDao.findAll();
	}

}
